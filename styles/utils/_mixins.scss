@use "sass:color";
@use "sass:math";
@use "./variables" as *; 

@mixin flex-center {
    display: flex;
    justify-content: center;
    align-items: center;
}

@mixin flex-center-column {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

// Couleur et effet des boutons : 
@mixin gradient-btn($bg, $txt, $l: 10%, $border: 25%, $hover: -8%) {
  background-image: linear-gradient(-180deg, color.adjust($bg, $lightness: $l) 0%, $bg 100%);
  border: 1px solid color.adjust($bg, $lightness: $border);
  color: $txt;

  &:hover {
    background-color: color.adjust($bg, $lightness: $hover);
  }
}



// texte en dégradé
@mixin text-gradient($from, $to, $ratio: 20%, $dir: 90deg, $blend: 8%, $mode: soft) {
  @if $mode == hard or $blend == 0% {
    background: linear-gradient($dir, $from 0 #{$ratio}, $to #{$ratio} 100%);
  } @else {
    $a: $ratio - $blend; // fin du plein $from
    @if $a < 0% { $a: 0%; }
    background: linear-gradient($dir, $from 0 #{$a}, $to #{$ratio} 100%);
  }
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
  color: transparent;
}

/* Alias prêt à l'emploi : $bleu → $vert1 avec 50/50, angle 135°, fondu 50% */
@mixin text-gradient-bleu-vert() {
  @include text-gradient($bleu, $vert1, 50%, 135deg, 50%, soft);
}



//Radius
@mixin radius-cpe {
  border-radius: 0.4rem; 
  border-top-left-radius: 1rem;
  border-bottom-right-radius: 1rem;
}


// =====================================
// ======  Effet Zoom aux images  ======
// =====================================
/* === Ken Burns avec PAN (zoom + translation) === */
$cpe-kb-defined: false !default;

@mixin _cpe-define-kb() {
  @if $cpe-kb-defined == false {
    $cpe-kb-defined: true !global;
    /* on définit un keyframe générique ; les valeurs finales seront injectées via animation */
    @keyframes cpe-kb-zoom-pan { from { } to { } }
  }
}

/* Conteneur-cadre qui masque le débord, et anime l'image à l'intérieur */
@mixin cpe-zoom-frame(
  $duration: 12s,
  $timing: ease-in-out,
  $pause-on-hover: true,
  $scale-to: 1.06,   // zoom final
  $pan-x: 0%,        // translation horizontale finale (ex: 3%, -2%)
  $pan-y: -2%        // translation verticale finale (ex: -3% = vers le haut)
) {
  @include _cpe-define-kb();

  position: relative;
  display: block;
  overflow: hidden;
  border-radius: inherit;

  > img, > picture > img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transform-origin: center;
    will-change: transform;

    /* on utilise animation + @property pour animer vers des valeurs custom via variables */
    @supports (transform: scale(1)) {
      @media (prefers-reduced-motion: no-preference) {
        animation: cpe-kb-zoom-pan $duration $timing infinite alternate;
      }
      /* on injecte les valeurs finales via CSS vars et une transition calc */
      --kb-scale-to: #{$scale-to};
      --kb-pan-x: #{$pan-x};
      --kb-pan-y: #{$pan-y};

      /* on sur-déclare les frames avec les valeurs */
      /* (truc simple : on met une animation-name dédiée pour ne pas multiplier les keyframes) */
      /* on utilise la propriété animation-timeline implicite (fallback simple ci-dessous) */
    }

    /* Fallback simple : on “fige” les frames avec une animation dédiée inline via shorthand */
    animation-name: cpe-kb-zoom-pan;
  }

  /* Pause au survol optionnelle */
  @if $pause-on-hover == true {
    @media (hover: hover) {
      &:hover > img,
      &:hover > picture > img { animation-play-state: paused; }
    }
  }

  /* Réécriture des frames avec les valeurs passées au mixin (portée locale via nesting) */
  @at-root {
    @keyframes cpe-kb-zoom-pan {
      from { transform: scale(1) translate3d(0, 0, 0); }
      to   { transform: scale(#{$scale-to}) translate3d(#{$pan-x}, #{$pan-y}, 0); }
    }
  }
}

/* Utilitaire : ratio fixe (optionnel) */
@mixin cpe-aspect($ratio) { aspect-ratio: $ratio; }




